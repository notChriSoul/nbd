name: nbd-mongo-kafka
services:
    mongo_1:
        build: .
        image: mongocustom:8.0.1
        restart: always
        container_name: mongodb1
        hostname: mongodb1
        networks:
            - mongonet
        ports:
            - "27017:27017"
        environment:
            - MONGO_INITDB_ROOT_USERNAME=nbd
            - MONGO_INITDB_ROOT_PASSWORD=nbdpassword
            - MONGO_INITDB_DATABASE=nbddb
        command: --config /etc/mongod.conf --port 27017
        healthcheck:
            test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--port", "27017" ]
            interval: 10s
            timeout: 2s
            retries: 5
        volumes:
            - mongo-db-data-1:/data/db
            - mongo-configdb-data-1:/data/configdb
    mongo_2:
        build: .
        image: mongocustom:8.0.1
        restart: always
        container_name: mongodb2
        hostname: mongodb2
        networks:
            - mongonet
        ports:
            - "27018:27018"
        environment:
            - MONGO_INITDB_ROOT_USERNAME=nbd
            - MONGO_INITDB_ROOT_PASSWORD=nbdpassword
            - MONGO_INITDB_DATABASE=nbddb
        command: --config /etc/mongod.conf --port 27018
        healthcheck:
            test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--port", "27018" ]
            interval: 10s
            timeout: 2s
            retries: 5
        volumes:
            - mongo-db-data-2:/data/db
            - mongo-configdb-data-2:/data/configdb
    mongo_3:
        build: .
        image: mongocustom:8.0.1
        restart: always
        container_name: mongodb3
        hostname: mongodb3
        networks:
            - mongonet
        ports:
            - "27019:27019"
        environment:
            - MONGO_INITDB_ROOT_USERNAME=nbd
            - MONGO_INITDB_ROOT_PASSWORD=nbdpassword
            - MONGO_INITDB_DATABASE=nbddb
        command: --config /etc/mongod.conf --port 27019
        healthcheck:
            test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--port", "27019" ]
            interval: 10s
            timeout: 2s
            retries: 5
        volumes:
            - mongo-db-data-3:/data/db
            - mongo-configdb-data-3:/data/configdb
    mongoinit:
        build: .
        image: mongocustom:8.0.1
        restart: on-failure
        container_name: mongodbinit
        hostname: mongodbinit
        networks:
            - mongonet
        depends_on:
            mongo_1:
                condition: service_healthy
            mongo_2:
                condition: service_healthy
            mongo_3:
                condition: service_healthy
        command: >
            mongosh --host mongodb1:27017 --username nbd --password nbdpassword --authenticationDatabase admin --eval
              '
              rs.initiate(
                {
                  _id: "replica_set_single",
                  version: 1,
                  members: [
                    { _id: 0, host: "mongodb1:27017" },
                    { _id: 1, host: "mongodb2:27018" },
                    { _id: 2, host: "mongodb3:27019" }
                  ]
                }
              );
              '
        volumes:
            - mongo-db-data-1:/data/db:ro
            - mongo-configdb-data-1:/data/configdb:ro
            - mongo-db-data-2:/data/db:ro
            - mongo-configdb-data-2:/data/configdb:ro
            - mongo-db-data-3:/data/db:ro
            - mongo-configdb-data-3:/data/configdb:ro
    kafka1:
        image: docker.io/bitnami/kafka:3.9.0
        hostname: kafka1
        container_name: kafka1
        ports:
            - target: 9192
              published: 9192
              protocol: tcp
            - target: 9193
              published: 9193
              protocol: tcp
        environment:
            - KAFKA_CFG_NODE_ID=1
            - KAFKA_CFG_BROKER_RACK=RACK1
            - KAFKA_CFG_PROCESS_ROLES=broker,controller
            - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
            - KAFKA_CFG_LISTENERS=CONTROLLER://:9193,DOCKER_EXTERNAL://kafka1:9192,DOCKER_INTERNAL://:19192
            - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT,DOCKER_INTERNAL:PLAINTEXT
            - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=DOCKER_INTERNAL
            - KAFKA_CFG_ADVERTISED_LISTENERS=DOCKER_EXTERNAL://kafka1:9192,DOCKER_INTERNAL://kafka1:19192
            - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9193,2@kafka2:9293,3@kafka3:9393
            - KAFKA_ENABLE_KRAFT=yes
            - KAFKA_KRAFT_CLUSTER_ID=596ff5838f114507a13c2314defa0427
            - ALLOW_PLAINTEXT_LISTENER=yes
            - KAFKA_OPTS=-Dlog4j.rootLogger=DEBUG
        volumes:
            - kafka1_data:/bitnami/kafka
        networks:
            - kafkanet
    kafka2:
        image: docker.io/bitnami/kafka:3.9.0
        hostname: kafka2
        container_name: kafka2
        ports:
            - target: 9292
              published: 9292
              protocol: tcp
            - target: 9293
              published: 9293
              protocol: tcp
        environment:
            - KAFKA_CFG_NODE_ID=2
            - KAFKA_CFG_BROKER_RACK=RACK1
            - KAFKA_CFG_PROCESS_ROLES=broker,controller
            - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
            - KAFKA_CFG_LISTENERS=CONTROLLER://:9293,DOCKER_EXTERNAL://kafka2:9292,DOCKER_INTERNAL://:19292
            - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT,DOCKER_INTERNAL:PLAINTEXT
            - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=DOCKER_INTERNAL
            - KAFKA_CFG_ADVERTISED_LISTENERS=DOCKER_EXTERNAL://kafka2:9292,DOCKER_INTERNAL://kafka2:19292
            - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9193,2@kafka2:9293,3@kafka3:9393
            - KAFKA_ENABLE_KRAFT=yes
            - KAFKA_KRAFT_CLUSTER_ID=596ff5838f114507a13c2314defa0427
            - ALLOW_PLAINTEXT_LISTENER=yes
            - KAFKA_OPTS=-Dlog4j.rootLogger=DEBUG
        volumes:
            - kafka2_data:/bitnami/kafka
        networks:
            - kafkanet
    kafka3:
        image: docker.io/bitnami/kafka:3.9.0
        hostname: kafka3
        container_name: kafka3
        ports:
            - target: 9392
              published: 9392
              protocol: tcp
            - target: 9393
              published: 9393
              protocol: tcp
        environment:
            - KAFKA_CFG_NODE_ID=3
            - KAFKA_CFG_BROKER_RACK=RACK1
            - KAFKA_CFG_PROCESS_ROLES=broker,controller
            - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
            - KAFKA_CFG_LISTENERS=CONTROLLER://:9393,DOCKER_EXTERNAL://kafka3:9392,DOCKER_INTERNAL://:19392
            - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT,DOCKER_INTERNAL:PLAINTEXT
            - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=DOCKER_INTERNAL
            - KAFKA_CFG_ADVERTISED_LISTENERS=DOCKER_EXTERNAL://kafka3:9392,DOCKER_INTERNAL://kafka3:19392
            - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9193,2@kafka2:9293,3@kafka3:9393
            - KAFKA_ENABLE_KRAFT=yes
            - KAFKA_KRAFT_CLUSTER_ID=596ff5838f114507a13c2314defa0427
            - ALLOW_PLAINTEXT_LISTENER=yes
            - KAFKA_OPTS=-Dlog4j.rootLogger=DEBUG
        volumes:
            - kafka3_data:/bitnami/kafka
        networks:
            - kafkanet

volumes:
    mongo-db-data-1:
    mongo-configdb-data-1:
    mongo-db-data-2:
    mongo-configdb-data-2:
    mongo-db-data-3:
    mongo-configdb-data-3:
    kafka1_data:
        driver: local
    kafka2_data:
        driver: local
    kafka3_data:
        driver: local

networks:
    mongonet: { }
    kafkanet:
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: 172.25.0.0/16